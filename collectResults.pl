# Script to collect significance results from runForAll_parallel.pl
# into a matrix of significances
# 
# Requires 6 hardcoded values:
#   $systemFileOrder - order to make the significance matrix in
#   $significancesOutFile - a file to output the results. The ouptut format
#                           is a tab seperated matrix of each system's 
#                           significance vs every other system. Below that is
#                           another matrix containing F,P,R indicating the 
#                           systems are statistically significantly different
#                           F for F1, P for Precision, R for recall. 
#   $differencesDir - directory generated by runForAll_parallel.pl that
#                     contains nohup results of significance tests
#   $significanceThreshold - threshold to determine statistical significance
#                            if signficance is below the threshold, then
#                            the metric (f1,precision,recall) is deemed
#                            statistically significantly different for the two
#                            systems being compared
#   $getConceptDiffs - 1 or 0, 1 indicating if a matrix of concept extraction
#                      statistical significances should be generated
#   $getRelationDiffs - 1 or 0, 1 indicating if a matrix of concept extraction
#                      statistical significances should be generated
#        NOTE: both getConceptDiffs and getRelationDiffs cannot be 1
use strict;
use warnings;


#Demo Code Hardcoded values
my $systemFolderOrder = ['teamA','teamB'];
my $significancesOutFile = 'significanceMatrix_demo';
my $differencesDir = 'demo_run';
my $significanceThreshold = 0.05;
my $getConceptDiffs = 0;
my $getRelationDiffs = 1;    
&_getSignificances($systemFolderOrder, $significancesOutFile, $differencesDir, $significanceThreshold, $getConceptDiffs, $getRelationDiffs);



#Code to replicate n2c2 2018 task 2 results
=comment
#maintain order of performance for generting the output matrix
my $systemFolderOrder = ['18_1','24_3','1_2','16_3','15_3','20_2','8_3','10_1','4_2','23_1'];
my $significancesOutFile = 'significances_concepts';
my $differencesDir = 'differences_concepts';
my $significanceThreshold = 0.05;
&_getSignificances($systemFolderOrder, $significancesOutFile, $differencesDir, $significanceThreshold, 1, 0);

$systemFolderOrder = ['24_3','10_1','20_1','1_1','13_2','4_1','15_3','16_1','22_1','25_1'];
$significancesOutFile = 'significances_relations';
$differencesDir = 'differences_relations';
$significanceThreshold = 0.05;
&_getSignificances($systemFolderOrder, $significancesOutFile, $differencesDir, $significanceThreshold, 0, 1);

$systemFolderOrder = ['24_3','1_2','20_3','15_1','10_1','4_2','16_3','25_2','22_1','3_2'];
$significancesOutFile = 'significances_endToEnd';
$differencesDir = 'differences_endToEnd';
$significanceThreshold = 0.05;
&_getSignificances($systemFolderOrder, $significancesOutFile, $differencesDir, $significanceThreshold, 0, 1);
=cut


#############################################################
#   Begin Code
############################################################ 


#routine to get significances for each system output
# against every other system output.
sub _getSignificances {
    my $systemFolderOrder = shift;
    my $significancesOutFile = shift;
    my $differencesDir = shift;
    my $significanceThreshold = shift;
    my $getConceptDiffs = shift;
    my $getRelationDiffs = shift;    
    
    #error checking
    if ($getConceptDiffs == 0 && $getRelationDiffs == 0) {
	die ("ERROR: conceptDiffs or getRelationDiffs must be 1\n");
    }
    if ($getConceptDiffs == 1 && $getRelationDiffs == 1) {
	die ("ERROR: getConceptDiffs and getRelationDiffs cannot both be 1\n");
    }

    
    #grab significances for each output
    #initialize the hashes that store significances
    my %fSigs = ();
    my %pSigs = ();
    my %rSigs = ();
    #iterate over the folders
    for (my $i = 0; $i < scalar @{$systemFolderOrder}; $i++) {
	for (my $j = 0; $j < scalar @{$systemFolderOrder}; $j++) {
	    my $team1 = ${$systemFolderOrder}[$i];
	    my $team2 = ${$systemFolderOrder}[$j];	    

	    #determine the file to read
	    my $runDirectory = $differencesDir.'/'.$team1.'_'.$team2;
	    my $inFile;
	    if ($getConceptDiffs) {
		$inFile =  "$runDirectory/nohup_concepts";
	    }
	    elsif ($getRelationDiffs) {
		$inFile =  "$runDirectory/nohup_relations";
	    }
	    $inFile or die ("ERROR: must define getConceptDiffs or getRelationDiffs\n");

	    #open the infile and read all the lines
	    open IN, $inFile or die ("ERROR: unable to open inFile: $inFile\n");
	    my @lines = ();
	    while (my $line = <IN>) {
		chomp $line;
		push @lines, $line;
	    }

	    #read the inFile (a nohup run file) until the scores are read
	    my $fSig = 'err';
	    my $pSig = 'err';
	    my $rSig = 'err';
	    for (my $i = 0; $i < scalar @lines; $i++) {
		#This is what the significance output looks like
		# Probabilities for accepting H0:
		# f1-score               : 1
		# precision              : 0.000999
		# recall                 : 1
		if ($lines[$i] =~ /Probabilities for accepting H0/) {
		    #grab the significance, lines are:
		    #<date/time>: Done
		    #  f1-score       : <score>
		    #  precision      : <score>
		    #  recal          : <score>
		    # grab f1-significance
		    $fSig = &_grabValue($lines[$i+2]);
		    $pSig = &_grabValue($lines[$i+3]);
		    $rSig = &_grabValue($lines[$i+4]);
		    last;
		}
	    }
	    $fSigs{"$team1,$team2"} = $fSig;
	    $pSigs{"$team1,$team2"} = $pSig;
	    $rSigs{"$team1,$team2"} = $rSig;
	}
    }


    #output the significances in tab seperated format
    open OUT, ">$significancesOutFile" 
	or die("ERROR: unable to open outFile: $significancesOutFile\n");
    print OUT "\t";
    foreach my $folder (@{$systemFolderOrder}) {
	print OUT "$folder\t";
    }
    print OUT "\n";
    foreach my $folder1 (@{$systemFolderOrder}) {
	print OUT "$folder1\t";
	foreach my $folder2 (@{$systemFolderOrder}) {
	    print OUT $fSigs{"$folder1,$folder2"}.",".$pSigs{"$folder1,$folder2"}.",".$rSigs{"$folder1,$folder2"}."\t";
	}
	print OUT "\n";
    }

    #print out the significance differences matrix (F,P,R at each)
    # index if it is < significance thereshold
    print OUT "\t";
    foreach my $folder (@{$systemFolderOrder}) {
	print OUT "$folder\t";
    }
    print OUT "\n";
    foreach my $folder1 (@{$systemFolderOrder}) {
	print OUT "$folder1\t";
	foreach my $folder2 (@{$systemFolderOrder}) {
	    #do a significance test for each
	    my $first = 1;
	    if ($fSigs{"$folder1,$folder2"} < $significanceThreshold) {
		print OUT "F";
		$first = 0;
	    }
	    if ($pSigs{"$folder1,$folder2"} < $significanceThreshold) {
		if ($first == 0) {
		    print OUT ",";
		}
		print OUT "P";
		$first = 0;
	    }
	    if ($rSigs{"$folder1,$folder2"} < $significanceThreshold) {
		if ($first == 0) {
		    print OUT ",";
		}
		print OUT "R";
	    }
	    print OUT "\t";
	}
	print OUT "\n";
    }
    close OUT;
    print "Done!\n";
}


#routine to grab signifiance values from a line
sub _grabValue {
    my $line = shift;
    
    my $val = 0;
    if ($line =~ /e-/) {
	#Note, an e means a very low significance, so just
	# set to 0 to make the code easier (a hack, I know)
	#TODO - improve this
	$val = 0;
    }
    else {
	$line =~ /:\s+(\d+\.?\d*)/;
	$val = $1;
    }
    return $val;
}
